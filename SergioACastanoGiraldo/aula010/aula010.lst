CCS PCM C Compiler, Version 5.007, 61971               21-jul-23 08:10

               Filename:   C:\Users\ABMS-Telecom\Documents\GitHub\Cursos_uC_PIC_Linguagem_C\SergioACastanoGiraldo\aula010\aula010.lst

               ROM used:   201 words (2%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           20 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   097
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   03D
.................... // TEMPORIZADOR - TIMER 0 - CONTADOR DE 0 A 60 SEGUNDOS 
.................... /* 
.................... PRESCALER: 
.................... RTCC_DIV_2, RTCC_DIV_4, RTCC_DIV_8, 
.................... RTCC_DIV_16, RTCC_DIV_32, 
.................... RTCC_DIV_64, RTCC_DIV_128, 
.................... RTCC_DIV_256. 
....................  
.................... MACRO DE INTERRUPÇÃO 
.................... #INT_RTCC  //TIMER0 
.................... void timer0(void){ 
....................    contador--;          //Se decrementa hasta llegar a cero 
....................    set_rtcc(value); //Timer0 
....................    if (contador<=0) // Si llega a cero, se cumplió tiempo 
....................    { 
....................       //Su Codigo aqui...... 
....................       contador=valor_contador;  // Inicializa el contador para el próximo periodo 
....................    } 
.................... } 
....................  
.................... */ 
....................  
....................  
.................... #INCLUDE<16f887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDWF  02,F
0033:  RETLW  3F
0034:  RETLW  06
0035:  RETLW  5B
0036:  RETLW  4F
0037:  RETLW  66
0038:  RETLW  6D
0039:  RETLW  7D
003A:  RETLW  07
003B:  RETLW  7F
003C:  RETLW  67
*
004A:  MOVF   2D,W
004B:  CLRF   78
004C:  SUBWF  2C,W
004D:  BTFSC  03.0
004E:  GOTO   052
004F:  MOVF   2C,W
0050:  MOVWF  77
0051:  GOTO   05E
0052:  CLRF   77
0053:  MOVLW  08
0054:  MOVWF  2E
0055:  RLF    2C,F
0056:  RLF    77,F
0057:  MOVF   2D,W
0058:  SUBWF  77,W
0059:  BTFSC  03.0
005A:  MOVWF  77
005B:  RLF    78,F
005C:  DECFSZ 2E,F
005D:  GOTO   055
005E:  RETURN
....................  
.................... #list 
....................  
.................... #USE DELAY(CRYSTAL=4000000) 
005F:  MOVLW  2C
0060:  MOVWF  04
0061:  BCF    03.7
0062:  MOVF   00,W
0063:  BTFSC  03.2
0064:  GOTO   073
0065:  MOVLW  01
0066:  MOVWF  78
0067:  CLRF   77
0068:  DECFSZ 77,F
0069:  GOTO   068
006A:  DECFSZ 78,F
006B:  GOTO   067
006C:  MOVLW  4A
006D:  MOVWF  77
006E:  DECFSZ 77,F
006F:  GOTO   06E
0070:  GOTO   071
0071:  DECFSZ 00,F
0072:  GOTO   065
0073:  RETURN
.................... #fuses XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... Byte CONST display[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67}; 
.................... #DEFINE U PORTC,0 
.................... #DEFINE D PORTC,1 
.................... #byte PORTB= 6 
.................... #byte PORTC= 7 
.................... INT VECES,SEG; 
.................... // Función para mostrar los segundos en el Display 
.................... VOID MOSTRAR( ) //Rutina mostrar 
.................... { 
....................    INT UNI,DEC;   //Declarar las variables UNI, DEC 
....................                   //como un entero, es decir de 8bits 
....................    DEC=SEG/10; 
0074:  MOVF   28,W
0075:  MOVWF  2C
0076:  MOVLW  0A
0077:  MOVWF  2D
0078:  CALL   04A
0079:  MOVF   78,W
007A:  MOVWF  2B
....................    UNI=SEG%10; 
007B:  MOVF   28,W
007C:  MOVWF  2C
007D:  MOVLW  0A
007E:  MOVWF  2D
007F:  CALL   04A
0080:  MOVF   77,W
0081:  MOVWF  2A
....................    PORTB=(DISPLAY[UNI]);   //Muestra lo que hay en unidades 
0082:  MOVF   2A,W
0083:  CALL   02F
0084:  MOVWF  78
0085:  MOVWF  06
....................                            //en el display 
....................    BIT_SET (U);            //Enciende el display de unidades 
0086:  BSF    07.0
....................    DELAY_MS(1);            //Retardo de 1 milisegundos 
0087:  MOVLW  01
0088:  MOVWF  2C
0089:  CALL   05F
....................    BIT_CLEAR(U);           //Apaga el display de unidades 
008A:  BCF    07.0
....................    PORTB=(DISPLAY[DEC]);   //Muestra lo que hay en unidades 
008B:  MOVF   2B,W
008C:  CALL   02F
008D:  MOVWF  78
008E:  MOVWF  06
....................                            //en el display 
....................    BIT_SET (D);            //Enciende el display de decenas 
008F:  BSF    07.1
....................    DELAY_MS(1);            //Retardo de 1 milisegundos 
0090:  MOVLW  01
0091:  MOVWF  2C
0092:  CALL   05F
....................    BIT_CLEAR(D);           //Apaga el display de decenas 
0093:  BCF    07.1
0094:  BCF    0A.3
0095:  BCF    0A.4
0096:  GOTO   0C7 (RETURN)
....................     
.................... } 
.................... //Rutina de interrupción por RTCC (TIMER) 
.................... #INT_RTCC  
.................... VOID RELOJ() 
.................... { 
....................    VECES--;          //Se decrementa la variable VECES 
*
003D:  DECF   27,F
....................    SET_RTCC(238);    //Se carga el timer con 238 
003E:  MOVLW  EE
003F:  MOVWF  01
....................    IF(VECES==0)      //Pregunta si VECES ya llego a cero 
0040:  MOVF   27,F
0041:  BTFSS  03.2
0042:  GOTO   046
....................    { 
....................       SEG++;         //Cuando VECES llega a cero incrementa SEG (Transcurrio 1 seg) 
0043:  INCF   28,F
....................       VECES=217;     //Vuelvo y cargo VECES con el valor 217 
0044:  MOVLW  D9
0045:  MOVWF  27
....................    } 
0046:  BCF    0B.2
0047:  BCF    0A.3
0048:  BCF    0A.4
0049:  GOTO   01B
.................... } 
.................... //Programa Principal 
.................... VOID MAIN() 
*
0097:  MOVLW  FF
0098:  MOVWF  29
0099:  BSF    03.5
009A:  BSF    03.6
009B:  MOVF   09,W
009C:  ANDLW  C0
009D:  MOVWF  09
009E:  BCF    03.6
009F:  BCF    1F.4
00A0:  BCF    1F.5
00A1:  MOVLW  00
00A2:  BSF    03.6
00A3:  MOVWF  08
00A4:  BCF    03.5
00A5:  CLRF   07
00A6:  CLRF   08
00A7:  CLRF   09
00A8:  BCF    03.7
00A9:  MOVLW  1F
00AA:  ANDWF  03,F
.................... { 
....................    SET_TRIS_B(0);    //Configura PUERTO B como salida 
00AB:  MOVLW  00
00AC:  BSF    03.5
00AD:  BCF    03.6
00AE:  MOVWF  06
....................    SET_TRIS_C(0);    //Configura PUERTO C como salida 
00AF:  MOVWF  07
00B0:  BCF    03.5
00B1:  MOVWF  29
....................    VECES=217;        //Carga VECES con 217 para efectuar la cuenta de 1 seg con el timer 
00B2:  MOVLW  D9
00B3:  MOVWF  27
....................    SEG=0;            //Inicializa los segundos en cero 
00B4:  CLRF   28
....................    SET_RTCC(238);    //Cargo valor inicial del timer 
00B5:  MOVLW  EE
00B6:  MOVWF  01
....................     
....................    // Configuración ANTIGUA del TIMER0 
....................    //SETUP_COUNTERS(RTCC_INTERNAL, RTCC_DIV_256); //Configura interrupcion del timer 
....................     
....................    // Configuración Recomendada del TIMER0 
....................    SETUP_TIMER_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);  
00B7:  BSF    03.5
00B8:  MOVF   01,W
00B9:  ANDLW  C0
00BA:  IORLW  07
00BB:  MOVWF  01
....................     
....................    ENABLE_INTERRUPTS(INT_RTCC);                 //Activa interrupcion del timer 
00BC:  BCF    03.5
00BD:  BSF    0B.5
....................    ENABLE_INTERRUPTS(GLOBAL);                   //Activa TODAS las interrupciones 
00BE:  MOVLW  C0
00BF:  IORWF  0B,F
....................    WHILE(TRUE)       //Haga por siempre 
....................    { 
....................       IF(SEG==60)    //Pregunta si ya se llego a 60 segundos 
00C0:  MOVF   28,W
00C1:  SUBLW  3C
00C2:  BTFSS  03.2
00C3:  GOTO   0C6
....................          SEG=0;      //Si si, vuelva a SEG a cero 
00C4:  CLRF   28
00C5:  GOTO   0C7
....................       ELSE           //Si no, 
....................          MOSTRAR();  //Muestre el valor de SEG en los Display 7 Segmentos 
00C6:  GOTO   074
00C7:  GOTO   0C0
....................    } 
.................... } 
00C8:  SLEEP

Configuration Fuses:
   Word  1: 2CE1   XT NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
