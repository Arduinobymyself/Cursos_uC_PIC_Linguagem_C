CCS PCM C Compiler, Version 5.007, 61971               06-jan-23 11:26

               Filename:   C:\Users\ABMS-Telecom\Documents\CCS C Projects\aula061\main.lst

               ROM used:   155 words (2%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           10 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
0004:  MOVLW  24
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
....................  
....................  
.................... signed long dutyPWM = 0; 
....................  
.................... void main() 
0019:  CLRF   21
001A:  CLRF   20
001B:  MOVLW  FF
001C:  MOVWF  22
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
0025:  MOVLW  1F
0026:  ANDWF  03,F
.................... { 
....................    setup_timer_2(T2_DIV_BY_1,99,1);      //100 us overflow, 100 us interrupt 
0027:  MOVLW  00
0028:  MOVWF  78
0029:  IORLW  04
002A:  BCF    03.5
002B:  MOVWF  12
002C:  MOVLW  63
002D:  BSF    03.5
002E:  MOVWF  12
....................     
....................    // 99 + 1 = 100 * 4 = 400 
....................    // 100% de duty = 400 
....................     
....................    setup_ccp1(CCP_PWM); 
002F:  BCF    03.5
0030:  BCF    22.2
0031:  MOVF   22,W
0032:  BSF    03.5
0033:  MOVWF  07
0034:  BCF    03.5
0035:  BCF    07.2
0036:  MOVLW  0C
0037:  MOVWF  17
....................    set_pwm1_duty((int16)0); 
0038:  CLRF   15
0039:  MOVF   17,W
003A:  ANDLW  CF
003B:  MOVWF  17
....................  
....................    while(TRUE) 
....................    { 
....................       if(input(pin_a0) == 1) 
003C:  BSF    03.5
003D:  BSF    05.0
003E:  BCF    03.5
003F:  BTFSS  05.0
0040:  GOTO   070
....................       { // aumenta o duty do PWM 
....................          dutyPWM += 40; 
0041:  MOVLW  28
0042:  ADDWF  20,F
0043:  BTFSC  03.0
0044:  INCF   21,F
....................          if(dutyPWM > 400) 
0045:  BTFSC  21.7
0046:  GOTO   056
0047:  MOVF   21,W
0048:  SUBLW  00
0049:  BTFSC  03.0
004A:  GOTO   056
004B:  XORLW  FF
004C:  BTFSS  03.2
004D:  GOTO   052
004E:  MOVF   20,W
004F:  SUBLW  90
0050:  BTFSC  03.0
0051:  GOTO   056
....................          { 
....................             dutyPWM = 400; 
0052:  MOVLW  01
0053:  MOVWF  21
0054:  MOVLW  90
0055:  MOVWF  20
....................          } 
....................          set_pwm1_duty((int16)dutyPWM); 
0056:  MOVF   21,W
0057:  MOVWF  79
0058:  MOVF   20,W
0059:  MOVWF  78
005A:  RRF    79,F
005B:  RRF    78,F
005C:  RRF    79,F
005D:  RRF    78,F
005E:  RRF    79,F
005F:  MOVF   78,W
0060:  MOVWF  15
0061:  RRF    79,F
0062:  RRF    79,W
0063:  ANDLW  30
0064:  MOVWF  77
0065:  MOVF   17,W
0066:  ANDLW  CF
0067:  IORWF  77,W
0068:  MOVWF  17
....................          delay_ms(300); 
0069:  MOVLW  02
006A:  MOVWF  23
006B:  MOVLW  96
006C:  MOVWF  24
006D:  CALL   004
006E:  DECFSZ 23,F
006F:  GOTO   06B
....................       } 
....................       if(input(pin_a1) == 1) 
0070:  BSF    03.5
0071:  BSF    05.1
0072:  BCF    03.5
0073:  BTFSS  05.1
0074:  GOTO   099
....................       { // diminui o duty do PWM 
....................          dutyPWM -= 40; 
0075:  MOVLW  28
0076:  SUBWF  20,F
0077:  MOVLW  00
0078:  BTFSS  03.0
0079:  MOVLW  01
007A:  SUBWF  21,F
....................          if(dutyPWM < 0) 
007B:  BTFSS  21.7
007C:  GOTO   07F
....................          { 
....................             dutyPWM = 0; 
007D:  CLRF   21
007E:  CLRF   20
....................          } 
....................          set_pwm1_duty((int16)dutyPWM); 
007F:  MOVF   21,W
0080:  MOVWF  79
0081:  MOVF   20,W
0082:  MOVWF  78
0083:  RRF    79,F
0084:  RRF    78,F
0085:  RRF    79,F
0086:  RRF    78,F
0087:  RRF    79,F
0088:  MOVF   78,W
0089:  MOVWF  15
008A:  RRF    79,F
008B:  RRF    79,W
008C:  ANDLW  30
008D:  MOVWF  77
008E:  MOVF   17,W
008F:  ANDLW  CF
0090:  IORWF  77,W
0091:  MOVWF  17
....................          delay_ms(300); 
0092:  MOVLW  02
0093:  MOVWF  23
0094:  MOVLW  96
0095:  MOVWF  24
0096:  CALL   004
0097:  DECFSZ 23,F
0098:  GOTO   094
....................       } 
0099:  GOTO   03C
....................    } 
....................  
.................... } 
009A:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
