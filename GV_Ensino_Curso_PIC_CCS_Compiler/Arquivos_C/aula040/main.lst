CCS PCM C Compiler, Version 5.007, 61971               31-mai-23 08:12

               Filename:   C:\Users\ABMS-Telecom\Documents\GitHub\Cursos_uC_PIC_Linguagem_C\GV_Ensino_Curso_PIC_CCS_Compiler\aula040\main.lst

               ROM used:   231 words (11%)
                           Largest free fragment is 1817
               RAM used:   13 (6%) at main() level
                           23 (10%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CB
0003:  NOP
.................... #include <main.h> 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOMCLR                	//Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(internal=4MHz) 
000C:  MOVLW  29
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETURN
....................  
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0039:  MOVLW  0F
003A:  BSF    03.5
003B:  ANDWF  06,W
003C:  IORLW  F0
003D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003E:  BCF    03.5
003F:  BSF    06.2
....................    delay_cycles(1); 
0040:  NOP
....................    lcd_output_enable(1); 
0041:  BSF    06.0
....................    delay_cycles(1); 
0042:  NOP
....................    high = lcd_read_nibble(); 
0043:  CALL   02D
0044:  MOVF   78,W
0045:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
0046:  BCF    06.0
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    06.0
....................    delay_us(1); 
0049:  NOP
....................    low = lcd_read_nibble(); 
004A:  CALL   02D
004B:  MOVF   78,W
004C:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
004D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004E:  MOVLW  0F
004F:  BSF    03.5
0050:  ANDWF  06,W
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0052:  BCF    03.5
0053:  SWAPF  30,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  2F,W
0059:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002D:  MOVF   06,W
002E:  MOVWF  77
002F:  SWAPF  06,W
0030:  ANDLW  0F
0031:  MOVWF  78
....................   #endif 
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0021:  SWAPF  30,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  06,W
0026:  IORWF  77,W
0027:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0028:  NOP
....................    lcd_output_enable(1); 
0029:  BSF    06.0
....................    delay_us(2); 
002A:  GOTO   02B
....................    lcd_output_enable(0); 
002B:  BCF    06.0
002C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0033:  BSF    03.5
0034:  BCF    06.0
....................    lcd_rs_tris(); 
0035:  BCF    06.1
....................    lcd_rw_tris(); 
0036:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0037:  BCF    03.5
0038:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005A:  MOVF   78,W
005B:  MOVWF  2F
005C:  BTFSC  2F.7
005D:  GOTO   039
....................    lcd_output_rs(address); 
005E:  BTFSS  2D.0
005F:  BCF    06.1
0060:  BTFSC  2D.0
0061:  BSF    06.1
....................    delay_cycles(1); 
0062:  NOP
....................    lcd_output_rw(0); 
0063:  BCF    06.2
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(0); 
0065:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0066:  SWAPF  2E,W
0067:  MOVWF  2F
0068:  MOVLW  0F
0069:  ANDWF  2F,F
006A:  MOVF   2F,W
006B:  MOVWF  30
006C:  CALL   021
....................    lcd_send_nibble(n & 0xf); 
006D:  MOVF   2E,W
006E:  ANDLW  0F
006F:  MOVWF  2F
0070:  MOVWF  30
0071:  CALL   021
0072:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0073:  MOVLW  0F
0074:  BSF    03.5
0075:  ANDWF  06,W
0076:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0077:  BCF    06.0
....................    lcd_rs_tris(); 
0078:  BCF    06.1
....................    lcd_rw_tris(); 
0079:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
007A:  BCF    03.5
007B:  BCF    06.1
....................    lcd_output_rw(0); 
007C:  BCF    06.2
....................    lcd_output_enable(0); 
007D:  BCF    06.0
....................      
....................    delay_ms(15); 
007E:  MOVLW  0F
007F:  MOVWF  29
0080:  CALL   00C
....................    for(i=1;i<=3;++i) 
0081:  MOVLW  01
0082:  MOVWF  28
0083:  MOVF   28,W
0084:  SUBLW  03
0085:  BTFSS  03.0
0086:  GOTO   08F
....................    { 
....................        lcd_send_nibble(3); 
0087:  MOVLW  03
0088:  MOVWF  30
0089:  CALL   021
....................        delay_ms(5); 
008A:  MOVLW  05
008B:  MOVWF  29
008C:  CALL   00C
008D:  INCF   28,F
008E:  GOTO   083
....................    } 
....................     
....................    lcd_send_nibble(2); 
008F:  MOVLW  02
0090:  MOVWF  30
0091:  CALL   021
....................    delay_ms(5); 
0092:  MOVLW  05
0093:  MOVWF  29
0094:  CALL   00C
....................    for(i=0;i<=3;++i) 
0095:  CLRF   28
0096:  MOVF   28,W
0097:  SUBLW  03
0098:  BTFSS  03.0
0099:  GOTO   0A3
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
009A:  MOVF   28,W
009B:  CALL   004
009C:  MOVWF  29
009D:  CLRF   2D
009E:  MOVF   29,W
009F:  MOVWF  2E
00A0:  CALL   033
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A1:  INCF   28,F
00A2:  GOTO   096
00A3:  GOTO   0E0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
00A4:  RLF    28,F
00A5:  RLF    28,F
00A6:  RLF    28,F
00A7:  MOVLW  F8
00A8:  ANDWF  28,F
....................    which &= 0x38; 
00A9:  MOVLW  38
00AA:  ANDWF  28,F
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
00AB:  MOVF   28,W
00AC:  IORLW  40
00AD:  MOVWF  2C
00AE:  CLRF   2D
00AF:  MOVF   2C,W
00B0:  MOVWF  2E
00B1:  CALL   033
....................  
....................    for(i=0; i<8; i++) 
00B2:  CLRF   2B
00B3:  MOVF   2B,W
00B4:  SUBLW  07
00B5:  BTFSS  03.0
00B6:  GOTO   0CA
....................    { 
....................       lcd_send_byte(1, *ptr++); 
00B7:  MOVF   2A,W
00B8:  MOVWF  7A
00B9:  MOVF   29,W
00BA:  INCF   29,F
00BB:  BTFSC  03.2
00BC:  INCF   2A,F
00BD:  MOVWF  04
00BE:  BCF    03.7
00BF:  BTFSC  7A.0
00C0:  BSF    03.7
00C1:  MOVF   00,W
00C2:  MOVWF  2C
00C3:  MOVLW  01
00C4:  MOVWF  2D
00C5:  MOVF   2C,W
00C6:  MOVWF  2E
00C7:  CALL   033
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
00C8:  INCF   2B,F
00C9:  GOTO   0B3
00CA:  GOTO   0E5 (RETURN)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... int heart[8] = { 
....................    0b00000, 
....................    0b00000, 
....................    0b01010, 
....................    0b11111, 
....................    0b11111, 
....................    0b01110, 
....................    0b00100, 
....................    0b00000 
.................... }; 
*
00D3:  CLRF   20
00D4:  CLRF   21
00D5:  MOVLW  0A
00D6:  MOVWF  22
00D7:  MOVLW  1F
00D8:  MOVWF  23
00D9:  MOVWF  24
00DA:  MOVLW  0E
00DB:  MOVWF  25
00DC:  MOVLW  04
00DD:  MOVWF  26
00DE:  CLRF   27
....................  
....................  
....................  
....................  
.................... void main() 
*
00CB:  BSF    03.5
00CC:  BSF    0E.3
00CD:  MOVLW  07
00CE:  BCF    03.5
00CF:  MOVWF  1F
00D0:  BCF    03.7
00D1:  MOVLW  1F
00D2:  ANDWF  03,F
.................... { 
....................  
....................    lcd_init(); 
*
00DF:  GOTO   073
....................    lcd_set_cgram_char(0, heart); 
00E0:  CLRF   28
00E1:  CLRF   2A
00E2:  MOVLW  20
00E3:  MOVWF  29
00E4:  GOTO   0A4
....................  
....................    while(TRUE) 
....................    { 
00E5:  GOTO   0E5
....................       /* 
....................       printf(lcd_putc, "\f"); 
....................       lcd_gotoxy(1, 2); 
....................       printf(lcd_putc, "    ABMS Telecom"); 
....................       lcd_gotoxy(21, 1); 
....................       printf(lcd_putc, "     Bem vindo!"); 
....................       lcd_gotoxy(21, 2); 
....................       printf(lcd_putc, "      %c voce!", 0); 
....................       delay_ms(400); 
....................       */ 
....................        
....................        
....................        
....................    } 
....................  
.................... } 
00E6:  SLEEP

Configuration Fuses:
   Word  1: 3F10   NOWDT PUT INTRC_IO NOMCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
