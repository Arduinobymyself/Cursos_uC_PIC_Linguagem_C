CCS PCM C Compiler, Version 5.007, 61971               31-mai-23 09:58

               Filename:   C:\Users\ABMS-Telecom\Documents\CCS C Projects\TecladoMatricial_LCD\TelcadoMatricial_LCD.lst

               ROM used:   630 words (8%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           25 (7%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   237
0003:  NOP
.................... #include <TelcadoMatricial_LCD.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  BCF    0A.0
0015:  BCF    0A.1
0016:  BCF    0A.2
0017:  ADDWF  02,F
0018:  RETLW  28
0019:  RETLW  0C
001A:  RETLW  01
001B:  RETLW  06
001C:  DATA C4,34
001D:  DATA E7,34
001E:  DATA F4,32
001F:  DATA 3A,10
0020:  DATA 00,00
0021:  DATA D6,37
0022:  DATA E3,32
0023:  DATA 20,32
0024:  DATA E9,33
0025:  DATA 69,3A
0026:  DATA EF,3A
0027:  DATA A0,12
0028:  DATA 63,00
*
010A:  MOVF   0B,W
010B:  MOVWF  25
010C:  BCF    0B.7
010D:  BSF    03.5
010E:  BSF    03.6
010F:  BSF    0C.7
0110:  BSF    0C.0
0111:  NOP
0112:  NOP
0113:  BCF    03.5
0114:  MOVF   0C,W
0115:  ANDLW  7F
0116:  BTFSC  03.2
0117:  GOTO   151
0118:  BCF    03.6
0119:  MOVWF  26
011A:  BSF    03.6
011B:  MOVF   0D,W
011C:  BCF    03.6
011D:  MOVWF  27
011E:  BSF    03.6
011F:  MOVF   0F,W
0120:  BCF    03.6
0121:  MOVWF  28
0122:  MOVF   26,W
0123:  MOVWF  2A
0124:  CALL   0DE
0125:  MOVF   27,W
0126:  BSF    03.6
0127:  MOVWF  0D
0128:  BCF    03.6
0129:  MOVF   28,W
012A:  BSF    03.6
012B:  MOVWF  0F
012C:  BSF    03.5
012D:  BSF    0C.7
012E:  BSF    0C.0
012F:  NOP
0130:  NOP
0131:  BCF    03.5
0132:  RLF    0C,W
0133:  RLF    0E,W
0134:  ANDLW  7F
0135:  BTFSC  03.2
0136:  GOTO   151
0137:  BCF    03.6
0138:  MOVWF  26
0139:  BSF    03.6
013A:  MOVF   0D,W
013B:  BCF    03.6
013C:  MOVWF  27
013D:  BSF    03.6
013E:  MOVF   0F,W
013F:  BCF    03.6
0140:  MOVWF  28
0141:  MOVF   26,W
0142:  MOVWF  2A
0143:  CALL   0DE
0144:  MOVF   27,W
0145:  BSF    03.6
0146:  MOVWF  0D
0147:  BCF    03.6
0148:  MOVF   28,W
0149:  BSF    03.6
014A:  MOVWF  0F
014B:  INCF   0D,F
014C:  BTFSC  03.2
014D:  INCF   0F,F
014E:  BCF    03.6
014F:  GOTO   10D
0150:  BSF    03.6
0151:  BCF    03.6
0152:  BTFSC  25.7
0153:  BSF    0B.7
0154:  BCF    0A.3
0155:  BCF    0A.4
0156:  GOTO   256 (RETURN)
*
01A7:  CLRF   77
01A8:  CLRF   78
01A9:  MOVF   27,W
01AA:  BCF    03.0
01AB:  BTFSC  28.0
01AC:  ADDWF  77,F
01AD:  RRF    77,F
01AE:  RRF    78,F
01AF:  BTFSC  28.1
01B0:  ADDWF  77,F
01B1:  RRF    77,F
01B2:  RRF    78,F
01B3:  BTFSC  28.2
01B4:  ADDWF  77,F
01B5:  RRF    77,F
01B6:  RRF    78,F
01B7:  BTFSC  28.3
01B8:  ADDWF  77,F
01B9:  RRF    77,F
01BA:  RRF    78,F
01BB:  BTFSC  28.4
01BC:  ADDWF  77,F
01BD:  RRF    77,F
01BE:  RRF    78,F
01BF:  BTFSC  28.5
01C0:  ADDWF  77,F
01C1:  RRF    77,F
01C2:  RRF    78,F
01C3:  BTFSC  28.6
01C4:  ADDWF  77,F
01C5:  RRF    77,F
01C6:  RRF    78,F
01C7:  BTFSC  28.7
01C8:  ADDWF  77,F
01C9:  RRF    77,F
01CA:  RRF    78,F
*
01E1:  MOVF   0B,W
01E2:  MOVWF  26
01E3:  BCF    0B.7
01E4:  BSF    03.5
01E5:  BSF    03.6
01E6:  BSF    0C.7
01E7:  BSF    0C.0
01E8:  NOP
01E9:  NOP
01EA:  BTFSC  03.0
01EB:  GOTO   213
01EC:  BCF    03.5
01ED:  MOVF   0C,W
01EE:  ANDLW  7F
01EF:  BCF    03.6
01F0:  MOVWF  27
01F1:  BSF    03.6
01F2:  MOVF   0D,W
01F3:  BCF    03.6
01F4:  MOVWF  28
01F5:  BSF    03.6
01F6:  MOVF   0F,W
01F7:  BCF    03.6
01F8:  MOVWF  29
01F9:  MOVF   27,W
01FA:  MOVWF  2A
01FB:  CALL   0DE
01FC:  MOVF   28,W
01FD:  BSF    03.6
01FE:  MOVWF  0D
01FF:  BCF    03.6
0200:  MOVF   29,W
0201:  BSF    03.6
0202:  MOVWF  0F
0203:  BSF    03.5
0204:  BSF    0C.7
0205:  BSF    0C.0
0206:  NOP
0207:  NOP
0208:  BCF    03.5
0209:  BCF    03.6
020A:  DECFSZ 25,F
020B:  GOTO   20D
020C:  GOTO   210
020D:  BSF    03.5
020E:  BSF    03.6
020F:  GOTO   213
0210:  GOTO   232
0211:  BSF    03.5
0212:  BSF    03.6
0213:  BCF    03.5
0214:  RLF    0C,W
0215:  RLF    0E,W
0216:  ANDLW  7F
0217:  BCF    03.6
0218:  MOVWF  27
0219:  BSF    03.6
021A:  MOVF   0D,W
021B:  BCF    03.6
021C:  MOVWF  28
021D:  BSF    03.6
021E:  MOVF   0F,W
021F:  BCF    03.6
0220:  MOVWF  29
0221:  MOVF   27,W
0222:  MOVWF  2A
0223:  CALL   0DE
0224:  MOVF   28,W
0225:  BSF    03.6
0226:  MOVWF  0D
0227:  BCF    03.6
0228:  MOVF   29,W
0229:  BSF    03.6
022A:  MOVWF  0F
022B:  INCF   0D,F
022C:  BTFSC  03.2
022D:  INCF   0F,F
022E:  BCF    03.0
022F:  BCF    03.6
0230:  DECFSZ 25,F
0231:  GOTO   1E4
0232:  BTFSC  26.7
0233:  BSF    0B.7
0234:  BCF    0A.3
0235:  BCF    0A.4
0236:  GOTO   271 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20MHz) 
*
002C:  MOVLW  2B
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   03F
0032:  MOVLW  06
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  7B
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  DECFSZ 00,F
003E:  GOTO   032
003F:  RETURN
....................  
....................  
....................  
.................... #include <KBD.C> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0029:  BCF    0A.3
002A:  BCF    0A.4
002B:  GOTO   247 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
0241:  BCF    03.5
0242:  CLRF   20
....................    static int1 kbd_down; 
0243:  BCF    21.0
....................    static char last_key; 
0244:  CLRF   22
....................    static BYTE col; 
0245:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0157:  CLRF   25
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0158:  INCF   20,F
0159:  MOVF   20,W
015A:  SUBLW  21
015B:  BTFSC  03.0
015C:  GOTO   1D8
....................        switch (col) { 
015D:  MOVF   23,W
015E:  BTFSC  03.2
015F:  GOTO   167
0160:  XORLW  01
0161:  BTFSC  03.2
0162:  GOTO   16D
0163:  XORLW  03
0164:  BTFSC  03.2
0165:  GOTO   173
0166:  GOTO   178
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0167:  MOVLW  DE
0168:  BSF    03.5
0169:  MOVWF  08
....................                     kbd=~COL0&ALL_PINS; 
016A:  BCF    03.5
016B:  MOVWF  08
....................                     break; 
016C:  GOTO   178
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
016D:  MOVLW  BE
016E:  BSF    03.5
016F:  MOVWF  08
....................                     kbd=~COL1&ALL_PINS; 
0170:  BCF    03.5
0171:  MOVWF  08
....................                     break; 
0172:  GOTO   178
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0173:  MOVLW  7E
0174:  BSF    03.5
0175:  MOVWF  08
....................                     kbd=~COL2&ALL_PINS; 
0176:  BCF    03.5
0177:  MOVWF  08
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0178:  BTFSS  21.0
0179:  GOTO   184
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
017A:  MOVF   08,W
017B:  ANDLW  1E
017C:  SUBLW  1E
017D:  BTFSS  03.2
017E:  GOTO   183
....................            kbd_down=FALSE; 
017F:  BCF    21.0
....................            kchar=last_key; 
0180:  MOVF   22,W
0181:  MOVWF  25
....................            last_key='\0'; 
0182:  CLRF   22
....................          } 
....................        } else { 
0183:  GOTO   1D7
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0184:  MOVF   08,W
0185:  ANDLW  1E
0186:  SUBLW  1E
0187:  BTFSC  03.2
0188:  GOTO   1D2
....................              if((kbd & ROW0)==0) 
0189:  MOVF   08,W
018A:  ANDLW  02
018B:  BTFSS  03.2
018C:  GOTO   18F
....................                row=0; 
018D:  CLRF   26
018E:  GOTO   1A3
....................              else if((kbd & ROW1)==0) 
018F:  MOVF   08,W
0190:  ANDLW  04
0191:  BTFSS  03.2
0192:  GOTO   196
....................                row=1; 
0193:  MOVLW  01
0194:  MOVWF  26
0195:  GOTO   1A3
....................              else if((kbd & ROW2)==0) 
0196:  MOVF   08,W
0197:  ANDLW  08
0198:  BTFSS  03.2
0199:  GOTO   19D
....................                row=2; 
019A:  MOVLW  02
019B:  MOVWF  26
019C:  GOTO   1A3
....................              else if((kbd & ROW3)==0) 
019D:  MOVF   08,W
019E:  ANDLW  10
019F:  BTFSS  03.2
01A0:  GOTO   1A3
....................                row=3; 
01A1:  MOVLW  03
01A2:  MOVWF  26
....................              last_key =KEYS[row][col]; 
01A3:  MOVF   26,W
01A4:  MOVWF  27
01A5:  MOVLW  03
01A6:  MOVWF  28
*
01CB:  MOVF   23,W
01CC:  ADDWF  78,W
01CD:  CALL   004
01CE:  MOVWF  78
01CF:  MOVWF  22
....................              kbd_down = TRUE; 
01D0:  BSF    21.0
....................           } else { 
01D1:  GOTO   1D7
....................              ++col; 
01D2:  INCF   23,F
....................              if(col==3) 
01D3:  MOVF   23,W
01D4:  SUBLW  03
01D5:  BTFSC  03.2
....................                col=0; 
01D6:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01D7:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01D8:  MOVLW  FE
01D9:  BSF    03.5
01DA:  MOVWF  08
....................   return(kchar); 
01DB:  BCF    03.5
01DC:  MOVF   25,W
01DD:  MOVWF  78
01DE:  BCF    0A.3
01DF:  BCF    0A.4
01E0:  GOTO   25A (RETURN)
.................... } 
....................  
....................  
.................... /* 
.................... #define LCD_ENABLE_PIN PIN_B0 
.................... #define LCD_RS_PIN PIN_B1 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
.................... */ 
....................  
.................... #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
005D:  MOVLW  0F
005E:  BSF    03.5
005F:  ANDWF  06,W
0060:  IORLW  F0
0061:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0062:  BCF    03.5
0063:  BSF    06.2
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(1); 
0065:  BSF    06.0
....................    delay_cycles(1); 
0066:  NOP
....................    high = lcd_read_nibble(); 
0067:  CALL   051
0068:  MOVF   78,W
0069:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
006A:  BCF    06.0
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_enable(1); 
006C:  BSF    06.0
....................    delay_us(1); 
006D:  GOTO   06E
006E:  GOTO   06F
006F:  NOP
....................    low = lcd_read_nibble(); 
0070:  CALL   051
0071:  MOVF   78,W
0072:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
0073:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0074:  MOVLW  0F
0075:  BSF    03.5
0076:  ANDWF  06,W
0077:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0078:  BCF    03.5
0079:  SWAPF  32,W
007A:  MOVWF  77
007B:  MOVLW  F0
007C:  ANDWF  77,F
007D:  MOVF   77,W
007E:  IORWF  31,W
007F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0051:  MOVF   06,W
0052:  MOVWF  77
0053:  SWAPF  06,W
0054:  ANDLW  0F
0055:  MOVWF  78
....................   #endif 
0056:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0040:  SWAPF  32,W
0041:  ANDLW  F0
0042:  MOVWF  77
0043:  MOVLW  0F
0044:  ANDWF  06,W
0045:  IORWF  77,W
0046:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0047:  NOP
....................    lcd_output_enable(1); 
0048:  BSF    06.0
....................    delay_us(2); 
0049:  MOVLW  02
004A:  MOVWF  77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  GOTO   04E
004E:  NOP
....................    lcd_output_enable(0); 
004F:  BCF    06.0
0050:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0057:  BSF    03.5
0058:  BCF    06.0
....................    lcd_rs_tris(); 
0059:  BCF    06.1
....................    lcd_rw_tris(); 
005A:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005B:  BCF    03.5
005C:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0080:  MOVF   78,W
0081:  MOVWF  31
0082:  BTFSC  31.7
0083:  GOTO   05D
....................    lcd_output_rs(address); 
0084:  BTFSS  2F.0
0085:  BCF    06.1
0086:  BTFSC  2F.0
0087:  BSF    06.1
....................    delay_cycles(1); 
0088:  NOP
....................    lcd_output_rw(0); 
0089:  BCF    06.2
....................    delay_cycles(1); 
008A:  NOP
....................    lcd_output_enable(0); 
008B:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
008C:  SWAPF  30,W
008D:  MOVWF  31
008E:  MOVLW  0F
008F:  ANDWF  31,F
0090:  MOVF   31,W
0091:  MOVWF  32
0092:  CALL   040
....................    lcd_send_nibble(n & 0xf); 
0093:  MOVF   30,W
0094:  ANDLW  0F
0095:  MOVWF  31
0096:  MOVWF  32
0097:  CALL   040
0098:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0099:  MOVLW  0F
009A:  BSF    03.5
009B:  ANDWF  06,W
009C:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
009D:  BCF    06.0
....................    lcd_rs_tris(); 
009E:  BCF    06.1
....................    lcd_rw_tris(); 
009F:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00A0:  BCF    03.5
00A1:  BCF    06.1
....................    lcd_output_rw(0); 
00A2:  BCF    06.2
....................    lcd_output_enable(0); 
00A3:  BCF    06.0
....................      
....................    delay_ms(15); 
00A4:  MOVLW  0F
00A5:  MOVWF  2B
00A6:  CALL   02C
....................    for(i=1;i<=3;++i) 
00A7:  MOVLW  01
00A8:  MOVWF  25
00A9:  MOVF   25,W
00AA:  SUBLW  03
00AB:  BTFSS  03.0
00AC:  GOTO   0B5
....................    { 
....................        lcd_send_nibble(3); 
00AD:  MOVLW  03
00AE:  MOVWF  32
00AF:  CALL   040
....................        delay_ms(5); 
00B0:  MOVLW  05
00B1:  MOVWF  2B
00B2:  CALL   02C
00B3:  INCF   25,F
00B4:  GOTO   0A9
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B5:  MOVLW  02
00B6:  MOVWF  32
00B7:  CALL   040
....................    delay_ms(5); 
00B8:  MOVLW  05
00B9:  MOVWF  2B
00BA:  CALL   02C
....................    for(i=0;i<=3;++i) 
00BB:  CLRF   25
00BC:  MOVF   25,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0C9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C0:  MOVF   25,W
00C1:  CALL   014
00C2:  MOVWF  26
00C3:  CLRF   2F
00C4:  MOVF   26,W
00C5:  MOVWF  30
00C6:  CALL   057
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C7:  INCF   25,F
00C8:  GOTO   0BC
00C9:  BCF    0A.3
00CA:  BCF    0A.4
00CB:  GOTO   248 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00CC:  DECFSZ 2C,W
00CD:  GOTO   0CF
00CE:  GOTO   0D2
....................       address=LCD_LINE_TWO; 
00CF:  MOVLW  40
00D0:  MOVWF  2D
00D1:  GOTO   0D3
....................    else 
....................       address=0; 
00D2:  CLRF   2D
....................       
....................    address+=x-1; 
00D3:  MOVLW  01
00D4:  SUBWF  2B,W
00D5:  ADDWF  2D,F
....................    lcd_send_byte(0,0x80|address); 
00D6:  MOVF   2D,W
00D7:  IORLW  80
00D8:  MOVWF  2E
00D9:  CLRF   2F
00DA:  MOVF   2E,W
00DB:  MOVWF  30
00DC:  CALL   057
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DD:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00DE:  MOVF   2A,W
00DF:  XORLW  07
00E0:  BTFSC  03.2
00E1:  GOTO   0EC
00E2:  XORLW  0B
00E3:  BTFSC  03.2
00E4:  GOTO   0F1
00E5:  XORLW  06
00E6:  BTFSC  03.2
00E7:  GOTO   0F9
00E8:  XORLW  02
00E9:  BTFSC  03.2
00EA:  GOTO   0FF
00EB:  GOTO   104
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00EC:  MOVLW  01
00ED:  MOVWF  2B
00EE:  MOVWF  2C
00EF:  CALL   0CC
00F0:  GOTO   109
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F1:  CLRF   2F
00F2:  MOVLW  01
00F3:  MOVWF  30
00F4:  CALL   057
....................                      delay_ms(2); 
00F5:  MOVLW  02
00F6:  MOVWF  2B
00F7:  CALL   02C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F8:  GOTO   109
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F9:  MOVLW  01
00FA:  MOVWF  2B
00FB:  MOVLW  02
00FC:  MOVWF  2C
00FD:  CALL   0CC
00FE:  GOTO   109
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00FF:  CLRF   2F
0100:  MOVLW  10
0101:  MOVWF  30
0102:  CALL   057
0103:  GOTO   109
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0104:  MOVLW  01
0105:  MOVWF  2F
0106:  MOVF   2A,W
0107:  MOVWF  30
0108:  CALL   057
....................      #endif 
....................    } 
0109:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
.................... char c; 
....................  
.................... void main() 
*
0237:  BSF    03.5
0238:  BSF    1F.0
0239:  BSF    1F.1
023A:  BSF    1F.2
023B:  BCF    1F.3
023C:  MOVLW  07
023D:  MOVWF  1C
023E:  BCF    03.7
023F:  MOVLW  1F
0240:  ANDWF  03,F
.................... { 
....................    kbd_init(); 
*
0246:  GOTO   029
....................  
....................    lcd_init(); 
0247:  GOTO   099
....................     
....................    printf(lcd_putc, "\f"); // limpa o LCD 
0248:  MOVLW  0C
0249:  MOVWF  2A
024A:  CALL   0DE
....................    lcd_gotoxy(1,1); // vai para coluna 1, linha 1 
024B:  MOVLW  01
024C:  MOVWF  2B
024D:  MOVWF  2C
024E:  CALL   0CC
....................    printf(lcd_putc, "Digite: "); 
024F:  MOVLW  1C
0250:  BSF    03.6
0251:  MOVWF  0D
0252:  MOVLW  00
0253:  MOVWF  0F
0254:  BCF    03.6
0255:  GOTO   10A
....................    delay_ms(50); 
0256:  MOVLW  32
0257:  MOVWF  2B
0258:  CALL   02C
....................  
....................    while(TRUE) 
....................    { 
....................       //TODO: User Code 
....................        
....................       c = kbd_getc(); // faz leitura do que for digitado no teclado matricial 
0259:  GOTO   157
025A:  MOVF   78,W
025B:  MOVWF  24
....................       delay_ms(1); 
025C:  MOVLW  01
025D:  MOVWF  2B
025E:  CALL   02C
....................        
....................       if(c != 0){ 
025F:  MOVF   24,F
0260:  BTFSC  03.2
0261:  GOTO   274
....................          lcd_gotoxy(1,2); 
0262:  MOVLW  01
0263:  MOVWF  2B
0264:  MOVLW  02
0265:  MOVWF  2C
0266:  CALL   0CC
....................          printf(lcd_putc, "Voce digitou %c", c); 
0267:  MOVLW  21
0268:  BSF    03.6
0269:  MOVWF  0D
026A:  MOVLW  00
026B:  MOVWF  0F
026C:  BCF    03.0
026D:  MOVLW  0D
026E:  BCF    03.6
026F:  MOVWF  25
0270:  GOTO   1E1
0271:  MOVF   24,W
0272:  MOVWF  2A
0273:  CALL   0DE
....................          //delay_ms(300); 
....................       } 
0274:  GOTO   259
....................        
....................    } 
....................  
.................... } 
0275:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
